キーボード配列を最適化する
条件
・英単語を使用

パラメータ
・指の移動距離(移動コスト)
・特定の指の使用頻度
・使用単語の多さ

時間がかかるキーを近くに配置する

画面(もしくはターミナル)にアルファベット１文字を表示する。(順番はランダムである。)
表示されてから表示されたキーを打つまでに何秒かかるかを辞書型で{a: 0.2, b: 0.4...}のように格納する。
秒数がかからなかったものから降順にターミナルに表示する

すべてのキーボードに対して何秒かかるかを測定する。
-> すべてのキーに対してユーザーがキーボードの配置に対して反応速度の秒数が保存される

以下のよく使われるキーを最も瞬発力が高い場所に以下の順に配置する。
E, T, A, O, I, N, S, H

一文字一文字のアルファベットから時間を取得する
a -> b 0.3秒
a -> c 0.2秒
a -> d 0.4秒

時間がかかったものほど近くに配置する

【提案①】
指の移動コストを最小化するプログラムを書く

ーー定義ーー
キーボードの配列を作成する。
keyboard = [
    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']
]

自分の指が存在する座標を格納するものを作成(初期値)
my_right_fingers = [[A, B], [C, D], [E, F], [G, H]]
my_left_fingers = [[A, B], [C, D], [E, F], [G, H]]

keyboard[a][b]からkeyboard[c][d]への移動の際のコストはabs(a-c)+abs(b-d)

ーー処理ーー
1. ランダムに英単語を表示してその英単語を打つのに必要な移動コストを計算する
2. コストを最小化するようにキーボードの配列を更新していく
3. 移動コストが文字数以下になったら(収束条件)キーボードの配列を表示